#include <ESP8266WiFi.h>        // For ESP8266
#include <PubSubClient.h>       // For MQTT
#include <DHT.h>                // If using DHT sensor for temperature/humidity

// WiFi credentials
const char* ssid = "your_SSID";           // Replace with your WiFi SSID
const char* password = "your_PASSWORD";    // Replace with your WiFi password

// MQTT Broker details
const char* mqttServer = "broker.hivemq.com"; // Replace with your MQTT Broker
const int mqttPort = 1883;                   // MQTT port
const char* mqttUser = "";                   // MQTT username if needed
const char* mqttPassword = "";               // MQTT password if needed

// Initialize DHT sensor
#define DHTPIN D4              // Pin where DHT is connected
#define DHTTYPE DHT11          // DHT 11
DHT dht(DHTPIN, DHTTYPE);

// Define sensor pins
#define SMOKE_SENSOR_PIN A0    // Analog pin for smoke sensor
#define FLAME_SENSOR_PIN D5    // Digital pin for flame sensor

// MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);

// Function declarations
void setupWiFi();
void reconnect();
void publishData(float temperature, float humidity, int smokeLevel, int flameDetected);

void setup() {
  Serial.begin(115200);
  setupWiFi();
  
  client.setServer(mqttServer, mqttPort);

  // Initialize DHT sensor
  dht.begin();
  
  pinMode(FLAME_SENSOR_PIN, INPUT);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Read temperature and humidity
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  // Read smoke sensor value
  int smokeLevel = analogRead(SMOKE_SENSOR_PIN);
  // Read flame sensor value
  int flameDetected = digitalRead(FLAME_SENSOR_PIN);

  // Check for error in reading
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print values to Serial Monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" Â°C, Humidity: ");
  Serial.print(humidity);
  Serial.print("%, Smoke Level: ");
  Serial.print(smokeLevel);
  Serial.print(", Flame Detected: ");
  Serial.println(flameDetected);

  // Publish data to MQTT
  publishData(temperature, humidity, smokeLevel, flameDetected);

  // Delay before the next loop
  delay(5000);  // Adjust delay as necessary
}

void setupWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("NodeMCU_Client", mqttUser, mqttPassword)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void publishData(float temperature, float humidity, int smokeLevel, int flameDetected) {
  // Create JSON formatted string
  String jsonData = "{\"temperature\":" + String(temperature) +
                    ",\"humidity\":" + String(humidity) +
                    ",\"smoke_level\":" + String(smokeLevel) +
                    ",\"flame_detected\":" + String(flameDetected) + "}";
  
  // Publish data to MQTT topic
  client.publish("your_topic/data", jsonData.c_str()); // Replace with your MQTT topic
  Serial.println("Data published: " + jsonData);
}
